for (t in 3:1000) {
yns[t]<-1.5*yns[t-1]-0.5*yns[t-2]+wns[t]
}
plot(1:length(yns),yns,xlab="t",ylab=expression(y[t]),type="l",ylim=c(-100,20),main="Non-stationary Time Series")
set.seed(42)
y<- w<- rnorm(1000)
for (t in 2:1000) {
y[t]<- 0.9*y[t-1]+w[t]
}
#Vector for line segments.
xy.mat<- cbind(c(0,450,225,750,600,1000),c(6.5,6.5,7.5,7.5,8.5,8.5))
##Plot the series, with annotations for means and the Dicky-Fuller Test##
plot(1:length(y),y,xlab="t",ylab=expression(y[t]),type="l",ylim=c(-8,10),main="Stationary Time Series")
set.seed(42)
yns<- wns<- rnorm(1000)
for (t in 3:1000) {
yns[t]<-1.5*yns[t-1]-0.75*yns[t-2]+wns[t]
}
plot(1:length(yns),yns,xlab="t",ylab=expression(y[t]),type="l",ylim=c(-100,20),main="Non-stationary Time Series")
set.seed(42)
y<- w<- rnorm(1000)
for (t in 2:1000) {
y[t]<- 0.9*y[t-1]+w[t]
}
#Vector for line segments.
xy.mat<- cbind(c(0,450,225,750,600,1000),c(6.5,6.5,7.5,7.5,8.5,8.5))
##Plot the series, with annotations for means and the Dicky-Fuller Test##
plot(1:length(y),y,xlab="t",ylab=expression(y[t]),type="l",ylim=c(-8,10),main="Stationary Time Series")
set.seed(42)
yns<- wns<- rnorm(1000)
for (t in 3:1000) {
yns[t]<-1.5*yns[t-1]-0.4*yns[t-2]+wns[t]
}
plot(1:length(yns),yns,xlab="t",ylab=expression(y[t]),type="l",ylim=c(-100,20),main="Non-stationary Time Series")
set.seed(42)
y<- w<- rnorm(1000)
for (t in 2:1000) {
y[t]<- 0.9*y[t-1]+w[t]
}
#Vector for line segments.
xy.mat<- cbind(c(0,450,225,750,600,1000),c(6.5,6.5,7.5,7.5,8.5,8.5))
##Plot the series, with annotations for means and the Dicky-Fuller Test##
plot(1:length(y),y,xlab="t",ylab=expression(y[t]),type="l",ylim=c(-8,10),main="Stationary Time Series")
set.seed(42)
yns<- wns<- rnorm(1000)
for (t in 3:1000) {
yns[t]<-1.5*yns[t-1]-0.55*yns[t-2]+wns[t]
}
plot(1:length(yns),yns,xlab="t",ylab=expression(y[t]),type="l",ylim=c(-100,20),main="Non-stationary Time Series")
set.seed(42)
y<- w<- rnorm(1000)
for (t in 2:1000) {
y[t]<- 0.9*y[t-1]+w[t]
}
#Vector for line segments.
xy.mat<- cbind(c(0,450,225,750,600,1000),c(6.5,6.5,7.5,7.5,8.5,8.5))
##Plot the series, with annotations for means and the Dicky-Fuller Test##
plot(1:length(y),y,xlab="t",ylab=expression(y[t]),type="l",ylim=c(-8,10),main="Stationary Time Series")
set.seed(42)
yns<- wns<- rnorm(1000)
for (t in 3:1000) {
yns[t]<-1.5*yns[t-1]-0.5*yns[t-2]+wns[t]
}
plot(1:length(yns),yns,xlab="t",ylab=expression(y[t]),type="l",ylim=c(-100,20),main="Non-stationary Time Series")
set.seed(123)
set.seed(123)
y<- w<- rnorm(1000)
for (t in 2:1000) {
y[t]<- 0.9*y[t-1]+w[t]
}
#Vector for line segments.
xy.mat<- cbind(c(0,450,225,750,600,1000),c(6.5,6.5,7.5,7.5,8.5,8.5))
##Plot the series, with annotations for means and the Dicky-Fuller Test##
plot(1:length(y),y,xlab="t",ylab=expression(y[t]),type="l",ylim=c(-8,10),main="Stationary Time Series")
set.seed(123)
yns<- wns<- rnorm(1000)
for (t in 3:1000) {
yns[t]<-1.5*yns[t-1]-0.5*yns[t-2]+wns[t]
}
plot(1:length(yns),yns,xlab="t",ylab=expression(y[t]),type="l",ylim=c(-100,20),main="Non-stationary Time Series")
set.seed(123)
y<- w<- rnorm(1000)
for (t in 2:1000) {
y[t]<- 0.9*y[t-1]+w[t]
}
#Vector for line segments.
xy.mat<- cbind(c(0,450,225,750,600,1000),c(6.5,6.5,7.5,7.5,8.5,8.5))
##Plot the series, with annotations for means and the Dicky-Fuller Test##
plot(1:length(y),y,xlab="t",ylab=expression(y[t]),type="l",ylim=c(-8,10),main="Stationary Time Series")
set.seed(123)
yns<- wns<- rnorm(1000)
for (t in 3:1000) {
yns[t]<-1.5*yns[t-1]-0.5*yns[t-2]+wns[t]
}
plot(1:length(yns),yns,xlab="t",ylab=expression(y[t]),type="l",ylim=c(-100,20),main="Non-stationary Time Series")
set.seed(50)
y<- w<- rnorm(1000)
for (t in 2:1000) {
y[t]<- 0.9*y[t-1]+w[t]
}
#Vector for line segments.
xy.mat<- cbind(c(0,450,225,750,600,1000),c(6.5,6.5,7.5,7.5,8.5,8.5))
##Plot the series, with annotations for means and the Dicky-Fuller Test##
plot(1:length(y),y,xlab="t",ylab=expression(y[t]),type="l",ylim=c(-8,10),main="Stationary Time Series")
set.seed(50)
yns<- wns<- rnorm(1000)
for (t in 3:1000) {
yns[t]<-1.5*yns[t-1]-0.5*yns[t-2]+wns[t]
}
plot(1:length(yns),yns,xlab="t",ylab=expression(y[t]),type="l",ylim=c(-100,20),main="Non-stationary Time Series")
set.seed(10)
y<- w<- rnorm(1000)
for (t in 2:1000) {
y[t]<- 0.9*y[t-1]+w[t]
}
#Vector for line segments.
xy.mat<- cbind(c(0,450,225,750,600,1000),c(6.5,6.5,7.5,7.5,8.5,8.5))
##Plot the series, with annotations for means and the Dicky-Fuller Test##
plot(1:length(y),y,xlab="t",ylab=expression(y[t]),type="l",ylim=c(-8,10),main="Stationary Time Series")
set.seed(10)
yns<- wns<- rnorm(1000)
for (t in 3:1000) {
yns[t]<-1.5*yns[t-1]-0.5*yns[t-2]+wns[t]
}
plot(1:length(yns),yns,xlab="t",ylab=expression(y[t]),type="l",ylim=c(-100,20),main="Non-stationary Time Series")
set.seed(42)
y<- w<- rnorm(1000)
for (t in 2:1000) {
y[t]<- 0.9*y[t-1]+w[t]
}
#Vector for line segments.
xy.mat<- cbind(c(0,450,225,750,600,1000),c(6.5,6.5,7.5,7.5,8.5,8.5))
##Plot the series, with annotations for means and the Dicky-Fuller Test##
plot(1:length(y),y,xlab="t",ylab=expression(y[t]),type="l",ylim=c(-8,10),main="Stationary Time Series")
set.seed(42)
yns<- wns<- rnorm(1000)
for (t in 3:1000) {
yns[t]<-1.5*yns[t-1]-0.5*yns[t-2]+wns[t]
}
plot(1:length(yns),yns,xlab="t",ylab=expression(y[t]),type="l",ylim=c(-100,20),main="Non-stationary Time Series")
set.seed(42)
y<- w<- rnorm(1000)
for (t in 2:1000) {
y[t]<- 0.9*y[t-1]+w[t]
}
#Vector for line segments.
xy.mat<- cbind(c(0,450,225,750,600,1000),c(6.5,6.5,7.5,7.5,8.5,8.5))
##Plot the series, with annotations for means and the Dicky-Fuller Test##
plot(1:length(y),y,xlab="t",ylab=expression(y[t]),type="l",ylim=c(-8,10),main="Stationary Time Series")
set.seed(42)
yns<- wns<- rnorm(1000)
for (t in 3:1000) {
yns[t]<-1.5*yns[t-1]-0.5*yns[t-2]+wns[t]
}
plot(1:length(yns),yns,xlab="t",ylab='value'),type="l",ylim=c(-100,20),main="Non-stationary Time Series")
set.seed(42)
y<- w<- rnorm(1000)
for (t in 2:1000) {
y[t]<- 0.9*y[t-1]+w[t]
}
#Vector for line segments.
xy.mat<- cbind(c(0,450,225,750,600,1000),c(6.5,6.5,7.5,7.5,8.5,8.5))
##Plot the series, with annotations for means and the Dicky-Fuller Test##
plot(1:length(y),y,xlab="t",ylab=expression(y[t]),type="l",ylim=c(-8,10),main="Stationary Time Series")
set.seed(42)
yns<- wns<- rnorm(1000)
for (t in 3:1000) {
yns[t]<-1.5*yns[t-1]-0.5*yns[t-2]+wns[t]
}
plot(1:length(yns),yns,xlab="t",ylab='value',type="l",ylim=c(-100,20),main="Non-stationary Time Series")
load("~/Documents/MDS_Monash/FIT5149/Group assignment/data/NB/rawdata.RData")
BigramTokenizer2 <- function(x) NGramTokenizer(x, Weka_control(min = 2, max = 2))
# dtm <- DocumentTermMatrix(corpusHS, control = list(tokenize = BigramTokenizer))
dtm <- DocumentTermMatrix(corpusHS2, control = list(tokenize = BigramTokenizer2, weighting = weightTfIdf))
#--- Import library --- https://rpubs.com/sujith/tm
library(readr)
library(stringr)
library(SnowballC)
library(RTextTools)
library(tm)
library(SnowballC)
library(tau)
library(dplyr)
library(textstem)
library(caret)
BigramTokenizer2 <- function(x) NGramTokenizer(x, Weka_control(min = 2, max = 2))
# dtm <- DocumentTermMatrix(corpusHS, control = list(tokenize = BigramTokenizer))
dtm <- DocumentTermMatrix(corpusHS2, control = list(tokenize = BigramTokenizer2, weighting = weightTfIdf))
corpusHS <- VCorpus(VectorSource(df2$content)) # create corpus
corpusHS = tm_map(corpusHS, removeNumbers)    # remove number
corpusHS = tm_map(corpusHS, str_replace_all, pattern="[[:punct:]]", replacement=" ")  # remove puctuation
corpusHS = tm_map(corpusHS, tolower)          # lower case
corpusHS = tm_map(corpusHS, removeWords, words=my_stopwords) # remove stopwords
corpusHS = tm_map(corpusHS, lemmatize_strings) # lemmatize
save.image("~/Documents/MDS_Monash/FIT5149/Group assignment/data/NB/rawdatavcorpus.RData")
BigramTokenizer2 <- function(x) NGramTokenizer(x, Weka_control(min = 2, max = 2))
# dtm <- DocumentTermMatrix(corpusHS, control = list(tokenize = BigramTokenizer))
dtm <- DocumentTermMatrix(corpusHS, control = list(tokenize = BigramTokenizer2, weighting = weightTfIdf))
library(RWeka)
install.packages("RWeka")
library(RWeka)
library(RWeka)
library("RWeka")
install.packages(RW"eka)
""
install.packages("RWeka")
library(RWeka)
library(rJava)
install.packages("rJava")
library(rJava)
install.packages("rJava",type='source')
install.packages("RWeka")
library(RWeka)
library(rJava)
library(RWeka)
BigramTokenizer3 <-
function(x)
unlist(lapply(ngrams(words(x), 2), paste, collapse = " "), use.names = FALSE)
# dtm <- DocumentTermMatrix(corpusHS, control = list(tokenize = BigramTokenizer))
dtm <- DocumentTermMatrix(corpusHS, control = list(tokenize = BigramTokenizer3, weighting = weightTfIdf))
corpusHS <- Corpus(VectorSource(df2$content)) # create corpus
corpusHS = tm_map(corpusHS, removeNumbers)    # remove number
corpusHS = tm_map(corpusHS, str_replace_all, pattern="[[:punct:]]", replacement=" ")  # remove puctuation
corpusHS = tm_map(corpusHS, tolower)          # lower case
corpusHS = tm_map(corpusHS, removeWords, words=my_stopwords) # remove stopwords
corpusHS = tm_map(corpusHS, lemmatize_strings) # lemmatize
corpusHS2 = tm_map(corpusHS, PlainTextDocument)  # change to plain text
BigramTokenizer <-
function(x)
unlist(lapply(ngrams(words(x), c(  2,3)), paste, collapse = " "), use.names = FALSE)
dtm <- DocumentTermMatrix(corpusHS, control = list(tokenize = BigramTokenizer))
inspect(dtm)
corpusHS = tm_map(corpusHS, PlainTextDocument)  # change to plain text
corpuaHS
corpuwHS
corpusHS
BigramTokenizer <-
function(x)
unlist(lapply(ngrams(words(x), c(  2,3)), paste, collapse = " "), use.names = FALSE)
dtm <- DocumentTermMatrix(corpusHS, control = list(tokenize = BigramTokenizer))
corpusHS <- Corpus(VectorSource(corpusHS))
BigramTokenizer <-
function(x)
unlist(lapply(ngrams(words(x), c(2,3)), paste, collapse = " "), use.names = FALSE)
dtm <- DocumentTermMatrix(corpusHS, control = list(tokenize = BigramTokenizer))
inspect(dtm)
## ----- one gram, bigram, trigram ----
NGramTokenizer2 <- function(x) unlist(lapply(NLP::ngrams(words(x), 2), paste, collapse=" "), use.names=FALSE)
dtm <- DocumentTermMatrix(corpusHS, control = list(tokenize = NGramTokenizer2))
inspect(dtm)
NGramTokenizer3
## ----- one gram, bigram, trigram ----
NGramTokenizer3 <- function(x) unlist(lapply(NLP::ngrams(words(x), 3), paste, collapse=" "), use.names=FALSE)
dtm <- DocumentTermMatrix(corpusHS, control = list(tokenize = NGramTokenizer2))
dtm <- DocumentTermMatrix(corpusHS, control = list(tokenize = NGramTokenizer3))
inspect(dtm)
load("~/Downloads/aml.RData")
anl
aml
aml@leader@model_id
load("~/Downloads/aml.RData")
aml@leaderboard
aml@leader
knitr::opts_chunk$set(echo = TRUE)
dat <- subset(data, Hospital =="A"&&Indicator_X==1)
dat <- subset(data, Hospital =="A"&Indicator_X==1)
head(data())
head(data)
data
data
knitr::opts_chunk$set(echo = TRUE)
library(gdata)
library(dplyr)
library(plyr)
library(tidyr)
library(googleVis)
library(leaflet)
library(ggplot2)
library(plotly)
library(lubridate)
library(scales)
###
require(quantmod)
require(ggplot2)
require(reshape2)
require(plyr)
require(scales)
require(RColorBrewer)
df = read.xls("PCOR File.xlsx", sheet = 1, header = TRUE) #Read file
summary(df)
data <-as.data.frame(df)
total_diagnoses <-ddply(data,.(Hospital), summarize, total_diagnoses = length(Indicator_X)) %>% arrange(total_diagnoses)
g <- ggplot(total_diagnoses, aes(Hospital, fill = total_diagnoses, weight = total_diagnoses)) +
ggtitle( "Total number of diagnoses over the period of 3 year")+
xlab("Hospital name")+ylab("Number of diagnoses")+
geom_bar() +
scale_x_discrete(limits = total_diagnoses$Hospital[order(total_diagnoses$total_diagnoses)]) +
geom_hline(yintercept = mean(total_diagnoses$total_diagnoses), color="black")
# g
ggplotly(g,tooltip = c("x", "y"))
k <- ggplot(data, aes(factor(Hospital), fill = factor(Indicator_X))) +
ggtitle( "Total number of diagnoses over the period of 3 year")+
xlab("Hospital name")+ylab("Number of diagnoses")+ geom_bar() +
scale_x_discrete(limits = total_diagnoses$Hospital[order(total_diagnoses$total_diagnoses)])
# k
ggplotly(k,tooltip = c("x", "y"))
# data <-as.data.frame(df) %>% select(Hospital, Indicator_X)
data_0  <- subset(data, Indicator_X == 0)
data_1  <- subset(data, Indicator_X == 1)
total_0 <- ddply(data_0,.(Hospital), summarize, total_no = length(Indicator_X)) %>% arrange(total_no)
total_1 <- ddply(data_1,.(Hospital), summarize, total_yes = length(Indicator_X)) %>% arrange(total_yes)
total   <-  merge(x = merge(x = total_0, y = total_1, by = c("Hospital")),
y = total_diagnoses, by = c("Hospital"))
total$yes_pct <- round(total$total_yes/total$total_diagnoses*100,2)
yes_pct_graph <- ggplot(total, aes(Hospital, fill = yes_pct, weight = yes_pct)) +
ggtitle( "The average proportion of positive diagnoses over the period of 3 year")+
xlab("Hospital name")+ylab("Percentege of positive diagnoses")+
geom_bar() +
scale_x_discrete(limits = total$Hospital[order(total$yes_pct)]) +
geom_hline(yintercept = mean(total$yes_pct), color="black")
ggplotly(yes_pct_graph,tooltip = c("x", "y"))
# yes_pct_graph
data$year <- year(ymd(data$Dateofdiagnosis))
data$month <- month(ymd(data$Dateofdiagnosis))
k <- ggplot(data, aes(factor(Hospital), fill = factor(year))) +
ggtitle( "Total number of diagnoses over the period of 3 year")+
xlab("Hospital name")+ylab("Number of diagnoses")+ geom_bar() +
scale_x_discrete(limits = total_diagnoses$Hospital[order(total_diagnoses$total_diagnoses)])
# k
ggplotly(k,tooltip = c("x", "y"))
total_year <- ddply(data,.(Hospital, year), summarize, total_diagnoses = length(Indicator_X))
total_year_A <- subset(total_year, Hospital == "A")
total_year_other <- subset(total_year, Hospital != "A") %>% ddply(.(year), summarize, total_diagnoses = mean(total_diagnoses))
total_year_other$Hospital <- c("others", "others", "others")
year_data <- rbind(total_year_A,total_year_other)
yty_graph <- year_data %>%    ggplot(aes(x=year, y=round(total_diagnoses), colour=Hospital)) + geom_line()
ggplotly(yty_graph,tooltip = c("x", "y"))
# require(gridExtra)
total_month <- ddply(data,.(Hospital, month), summarize, total_diagnoses = length(Indicator_X))
total_month_A <- subset(total_month, Hospital == "A")
total_month_other <- subset(total_month, Hospital != "A") %>% ddply(.(month), summarize, total_diagnoses = mean(total_diagnoses))
total_month_other$Hospital <- c("others", "others", "others")
month_data <- rbind(total_month_A,total_month_other)
# monthly_graph <- total_month %>%    ggplot(aes(x=month, y=round(total_diagnoses), colour=Hospital)) + geom_line()
monthly_graph2 <- month_data %>%    ggplot(aes(x=month, y=round(total_diagnoses), colour=Hospital)) +
ggtitle( "Average number of diagnoses per month")+
xlab("month")+ylab("Number of diagnoses")+ geom_line()
# grid.arrange(monthly_graph, monthly_graph2, ncol=2)
# ggplotly(monthly_graph,tooltip = c("x", "y","colour"))
ggplotly(monthly_graph2,tooltip = c("x", "y","colour"))
# require(gridExtra)
total_month1 <- ddply(subset(data,Indicator_X==1),.(Hospital, month), summarize, total_diagnoses = length(Indicator_X))
total_month_A1 <- subset(total_month1, Hospital == "A")
total_month_other1 <- subset(total_month1, Hospital != "A") %>% ddply(.(month), summarize, total_diagnoses = mean(total_diagnoses))
total_month_other1$Hospital <- c("others", "others", "others")
month_data1 <- rbind(total_month_A1,total_month_other1)
# monthly_graph <- total_month %>%    ggplot(aes(x=month, y=round(total_diagnoses), colour=Hospital)) + geom_line()
monthly_graph21 <- month_data1 %>%    ggplot(aes(x=month, y=round(total_diagnoses), colour=Hospital)) +
ggtitle( "Average number of positive diagnoses per month")+
xlab("month")+ylab("Number of  positive diagnoses diagnoses")+ geom_line()
# grid.arrange(monthly_graph, monthly_graph2, ncol=2)
# ggplotly(monthly_graph,tooltip = c("x", "y","colour"))
ggplotly(monthly_graph21,tooltip = c("x", "y","colour"))
dat<-ddply(data,.(Hospital, Dateofdiagnosis), summarize, total_diagnoses = length(Indicator_X))
dat <- subset(dat2, Hospital =="A")
dat <- subset(data, , Hospital =="A" && Indicator_X==1)
dat
data
dat <- subset(data, , Hospital =="A")
dat
data_1
dat <- subset(data_1, Hospital =="A") %>%
dply((Hospital, Dateofdiagnosis), summarize, total_diagnoses = length(Indicator_X))
dat <- subset(data_1, Hospital =="A") %>%
dply(.(Hospital, Dateofdiagnosis), summarize, total_diagnoses = length(Indicator_X))
dat <- subset(data_1, Hospital =="A") %>%
ddply(.(Hospital, Dateofdiagnosis), summarize, total_diagnoses = length(Indicator_X))
dat
dat$year<-as.numeric(as.POSIXlt(dat$Dateofdiagnosis)$year+1900)
dat$month<-as.numeric(as.POSIXlt(dat$Dateofdiagnosis)$mon+1)
dat$monthf<-factor(dat$month,levels=as.character(1:12),labels=c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"),ordered=TRUE)
dat$weekday = as.POSIXlt(dat$Dateofdiagnosis)$wday
dat$weekdayf<-factor(dat$weekday,levels=rev(0:6),labels=rev(c("Sun","Mon","Tue","Wed","Thu","Fri","Sat")),ordered=TRUE)
dat$yearmonth<-as.yearmon(dat$Dateofdiagnosis)
dat$yearmonthf<-factor(dat$yearmonth)
dat$week <- as.numeric(format(as.Date(dat$Dateofdiagnosis),"%W"))
dat<-ddply(dat,.(yearmonthf),transform,monthweek=1+week-min(week))
heatmapcalendar<- ggplot(dat, aes(monthweek, weekdayf, fill = total_diagnoses)) +
geom_tile(colour = "white") + facet_grid(year~monthf) + scale_fill_gradient(low="#c6dbef", high="#2171b5") +
theme_dark()+
ggtitle("Heatmap calendar - Total diagnoses of hospital A") +  xlab("\n\nWeek of Month") + ylab("")
heatmapcalendar
dat<-ddply(data,.(Hospital, Dateofdiagnosis), summarize, total_diagnoses = length(Indicator_X))
dat <- subset(dat2, Hospital =="A")
dat<-ddply(data,.(Hospital, Dateofdiagnosis), summarize, total_diagnoses = length(Indicator_X))
dat <- subset(dat, Hospital =="A")
dat$year<-as.numeric(as.POSIXlt(dat$Dateofdiagnosis)$year+1900)
dat$month<-as.numeric(as.POSIXlt(dat$Dateofdiagnosis)$mon+1)
dat$monthf<-factor(dat$month,levels=as.character(1:12),labels=c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"),ordered=TRUE)
dat$weekday = as.POSIXlt(dat$Dateofdiagnosis)$wday
dat$weekdayf<-factor(dat$weekday,levels=rev(0:6),labels=rev(c("Sun","Mon","Tue","Wed","Thu","Fri","Sat")),ordered=TRUE)
dat$yearmonth<-as.yearmon(dat$Dateofdiagnosis)
dat$yearmonthf<-factor(dat$yearmonth)
dat$week <- as.numeric(format(as.Date(dat$Dateofdiagnosis),"%W"))
dat<-ddply(dat,.(yearmonthf),transform,monthweek=1+week-min(week))
heatmapcalendar<- ggplot(dat, aes(monthweek, weekdayf, fill = total_diagnoses)) +
geom_tile(colour = "white") + facet_grid(year~monthf) + scale_fill_gradient(low="#c6dbef", high="#2171b5") +
theme_dark()+
ggtitle("Heatmap calendar - Total diagnoses of hospital A") +  xlab("\n\nWeek of Month") + ylab("")
heatmapcalendar
setwd("~/Documents/MDS_Monash/FIT5149/Result for ensemble")
source('~/.active-rstudio-document')
folder <- getwd()
file_list <- list.files(pattern="*.txt")
# read in each .txt file in file_list and rbind them into a data frame called data
compData <- data.frame(A= character(), B= character())
for (eachfile in file_list){
dat <- read.table(file=eachfile, sep=" ", quote="", comment.char="")
compData <- rbind(compData,dat)
}
compData <- data.frame(compData)
id <- as.character(unique(compData$V1))
tail(names(sort(table(compData$V1))), 1)
predict_label <- vector()
for (i in seq(1,length(id))) {
predict_label[i] <- names(sort(summary(as.factor(compData[compData$V1 == id[i],2])), decreasing=T)[1])
}
final <- data.frame(cbind(id,predict_label))
write.table(final, file = "MyData.txt",col.names = F,row.names = F,quote = F)
head(compData)
folder <- getwd()
file_list <- list.files(pattern="*.txt")
# read in each .txt file in file_list and rbind them into a data frame called data
compData <- data.frame(A= character(), B= character())
for (eachfile in file_list){
dat <- read.table(file=eachfile, sep=" ", quote="", comment.char="")
compData <- rbind(compData,dat)
}
compData[compData$V1 == "te_doc_2",2]
length(compData[compData$V1 == "te_doc_2",2])
folder <- getwd()
folder
file_list <- list.files(pattern="*.txt")
file_list
compData <- data.frame(A= character(), B= character())
for (eachfile in file_list){
dat <- read.table(file=eachfile, sep=" ", quote="", comment.char="")
compData <- rbind(compData,dat)
}
length(compData)
length(compData$V1)
478980/17
478980/18
folder <- getwd()
file_list <- list.files(pattern="*.txt")
# read in each .txt file in file_list and rbind them into a data frame called data
compData <- data.frame(A= character(), B= character())
for (eachfile in file_list){
dat <- read.table(file=eachfile, sep=" ", quote="", comment.char="")
compData <- rbind(compData,dat)
}
length(compData$V1)
length(compData$V1)/17
id <- as.character(unique(compData$V1))
tail(names(sort(table(compData$V1))), 1)
length(compData[compData$V1 == "te_doc_2",2])
compData[compData$V1 == "te_doc_2",2]
names(sort(summary(as.factor(compData[compData$V1 == "te_doc_2",2])), decreasing=T)[1])
folder <- getwd()
file_list <- list.files(pattern="*.txt")
# read in each .txt file in file_list and rbind them into a data frame called data
compData <- data.frame(A= character(), B= character())
for (eachfile in file_list){
dat <- read.table(file=eachfile, sep=" ", quote="", comment.char="")
compData <- rbind(compData,dat)
}
folder <- getwd()
file_list <- list.files(pattern="*.txt")
# read in each .txt file in file_list and rbind them into a data frame called data
compData <- data.frame(A= character(), B= character())
for (eachfile in file_list){
dat <- read.table(file=eachfile, sep=" ", quote="", comment.char="")
compData <- rbind(compData,dat)
}
compData <- data.frame(compData)
id <- as.character(unique(compData$V1))
tail(names(sort(table(compData$V1))), 1)
predict_label <- vector()
for (i in seq(1,length(id))) {
predict_label[i] <- names(sort(summary(as.factor(compData[compData$V1 == id[i],2])), decreasing=T)[1])
}
final <- data.frame(cbind(id,predict_label))
write.table(final, file = "MyData",col.names = F,row.names = F,quote = F)
folder <- getwd()
file_list <- list.files(pattern="*.txt")
# read in each .txt file in file_list and rbind them into a data frame called data
compData <- data.frame(A= character(), B= character())
for (eachfile in file_list){
dat <- read.table(file=eachfile, sep=" ", quote="", comment.char="")
compData <- rbind(compData,dat)
}
compData <- data.frame(compData)
id <- as.character(unique(compData$V1))
tail(names(sort(table(compData$V1))), 1)
predict_label <- vector()
for (i in seq(1,length(id))) {
predict_label[i] <- names(sort(summary(as.factor(compData[compData$V1 == id[i],2])), decreasing=T)[1])
}
final <- data.frame(cbind(id,predict_label))
write.table(final, file = "MyData",col.names = F,row.names = F,quote = F)
compData[compData$V1 == "te_doc_6",2])
compData[compData$V1 == "te_doc_6",2]
